class Spree::DecisionController < Spree::BaseController
  require 'spree/base_controller'
  require 'rubygems'
  require 'decisiontree'
  require 'narray'

  def index
  end


  def new
    @questions = QuestionDecision.all

    render :json => @questions.to_json(
        :only => [:statement, :id, :typeq],
        :include => [
            :answers => { :only => [:content]}])

  end

  def score
    @profil = Profil.new
    reponse = params[:decision]['_json']

    params[:decision]['_json'].each_with_index do |reponse,index|
      @profil.update_rep((index+1),reponse)
    end

    if @profil.save
      @url= []
      @id = []
      @description = []
      @name = []
      @price = []

      tab_a_chercher = calcul(reponse)

      tab_a_chercher.each do |indice_product|
          if product = Spree::Product.order('id').offset(indice_product).first
              @id.push(product.id)
              @url.push(spree.product_path(product))
              @description.push(product.description)
              @name.push(product.slug)
              @price.push(product.price.to_s)
            end
      end

      #Spree::Product.order("RANDOM()").limit(3).each do |product|
       # @id.push(product.id)
        #@url.push(spree.product_path(product))
        #@description.push(product.description)
        #@name.push(product.slug)
        #@price.push(product.price.to_s)
      #end

      render :json => {'id' => @id, 'url' => @url, 'description' => @description,'name' => @name,'price'=>@price}
    else
      render :json => 'error'.to_json
    end

  end



  def view
  end

  def train(profil)
    #Spree::Product.with_property('Dimension')
    #[0,0,0,0,0,1,1,1,1,1,2,2,2,2,2]

    attributes = ['Ouverture', 'Conscienciosité', 'Extraversion', 'Agréabilité','Neuroticisme', 'Sport','Technologie','Culture','Ecologie','Gastronomie','Genre','Age','Prix','Alcool','Objet']
    training = []

    Spree::Product.with_property('Dimension').each do |product|
      training.push(product.properties.dimension,product.id)
    end

    dec_tree = DecisionTree::ID3Tree.new(attributes, training, 1, :continuous)
    dec_tree.train

    decision = dec_tree.predict(profil)

    return decision

  end

  def test_algo
    profil =[]

    for i in 0..18
          profil.push(1)
    end

    return calcul(profil)
  end

  def calcul(profil)

    indice_pro = profil_return(profil)
    tab_score = calcul_score(indice_pro)
    previsions = prevision_product(tab_score)

    #previsions renvoit les indices de cadeau à choisir. Position dans l'ordre
    #Spree::Product.limit(1).offset(10)
    #Spree::Product.offset(10).first
    p previsions
    return previsions

  end

  def recup_tableau_profil

    tableauprofil = ReverseProfil.where('instanciation':1).all

    tab = []

    tableauprofil.each do |profil|
      tableau = []
      tableau.push(profil.rep1,profil.rep2,profil.rep3,profil.rep4,profil.rep5,profil.rep6,profil.rep7,profil.rep8,profil.rep9,profil.rep10,profil.rep11,profil.rep12,profil.rep13,profil.rep14,profil.rep15,profil.rep16,profil.rep17,profil.rep18,profil.rep19,profil.rep20,profil.item1,profil.item1mark,profil.item2,profil.item2mark,profil.item3,profil.item3mark)
      tab.push(tableau)
    end

    p 'ici tableau fini'
    p tab
    return tab

  end

  def distance_tab(tab1,tab2)
    #tab1, tab2 sont 2 1-D array

    resultat = 0
    for i in 0..tab1.length
      if tab1[i] == tab2[i]
        resultat = resultat +1
      end
    end
    return resultat
  end

  def profil_return(profil)
    #profil_db = recup_tableau_profil
    profil_db = [[1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 2, 1, 1, 1, 1, 1, 42, 4, 10, 3, 14, 3], [1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 19, 2, 39, 1, 11, 5], [1, 1, 2, 1, 3, 2, 2, 3, 1, 1, 2, 2, 2, 1, 1, 3, 2, 1, 2, 1, 51, 1, 43, 5, 44, 2], [1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 3, 2, 1, 3, 1, 1, 1, 1, 21, 1, 16, 1, 13, 1], [1, 1, 1, 2, 2, 2, 3, 3, 2, 1, 2, 2, 2, 3, 2, 2, 1, 2, 1, 2, 36, 4, 21, 5, 35, 3], [1, 1, 1, 3, 1, 2, 2, 3, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 16, 5, 36, 4, 18, 1], [1, 1, 1, 3, 1, 3, 2, 1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 2, 1, 46, 1, 47, 2, 37, 1], [2, 1, 1, 3, 1, 2, 2, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 1, 3, 1, 40, 5, 18, 2, 10, 3], [2, 2, 1, 3, 2, 2, 1, 1, 2, 1, 1, 1, 1, 3, 3, 3, 2, 1, 2, 1, 13, 3, 17, 2, 35, 1], [1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 3, 1, 1, 51, 1, 44, 2, 35, 2], [2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 3, 1, 2, 1, 1, 41, 4, 50, 2, 14, 2], [2, 1, 3, 3, 1, 1, 3, 1, 2, 2, 2, 2, 2, 2, 3, 1, 3, 3, 1, 2, 42, 5, 45, 2, 17, 4], [1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 1, 1, 1, 1, 2, 38, 1, 51, 5, 36, 1], [2, 1, 1, 2, 2, 2, 2, 3, 3, 1, 3, 2, 2, 3, 1, 3, 1, 3, 2, 1, 51, 1, 13, 2, 25, 1], [1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 44, 2, 22, 3, 41, 5], [2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 3, 2, 1, 1, 1, 2, 1, 1, 1, 1, 36, 1, 37, 5, 39, 5], [1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 3, 2, 1, 1, 2, 1, 2, 1, 1, 1, 16, 4, 37, 4, 47, 1], [1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 48, 1, 51, 1, 50, 2], [1, 1, 1, 1, 3, 2, 2, 3, 2, 3, 2, 2, 2, 3, 2, 3, 1, 2, 1, 3, 35, 4, 11, 4, 19, 2], [1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 3, 2, 2, 1, 2, 1, 3, 1, 2, 1, 47, 5, 50, 1, 39, 4], [1, 1, 2, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 3, 3, 1, 1, 1, 3, 2, 14, 1, 16, 2, 42, 1], [1, 2, 1, 3, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 3, 1, 2, 45, 3, 46, 2, 17, 2], [1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 51, 2, 14, 2, 10, 2], [1, 1, 1, 1, 1, 2, 2, 1, 2, 3, 3, 2, 1, 1, 3, 1, 1, 1, 2, 1, 20, 3, 24, 4, 19, 2], [1, 2, 1, 3, 1, 3, 1, 1, 1, 2, 1, 2, 3, 2, 2, 3, 1, 1, 2, 1, 22, 2, 42, 1, 17, 2], [1, 1, 1, 1, 3, 1, 2, 2, 2, 2, 3, 2, 1, 1, 2, 3, 1, 1, 3, 1, 10, 1, 47, 3, 25, 2], [2, 1, 1, 3, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 48, 2, 22, 1, 37, 4], [1, 1, 1, 2, 2, 2, 2, 3, 2, 1, 3, 2, 2, 1, 2, 2, 2, 1, 1, 1, 21, 1, 37, 5, 22, 1], [2, 1, 1, 1, 2, 2, 3, 3, 2, 2, 3, 2, 2, 3, 1, 3, 2, 1, 2, 3, 37, 5, 11, 0, 39, 2], [1, 1, 1, 3, 2, 3, 1, 1, 2, 1, 1, 2, 2, 2, 3, 1, 1, 1, 3, 1, 13, 5, 35, 3, 40, 4], [2, 1, 1, 3, 2, 1, 3, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 3, 38, 1, 24, 1, 37, 3], [1, 1, 1, 1, 2, 2, 2, 3, 1, 2, 3, 2, 1, 1, 1, 1, 1, 3, 1, 2, 39, 2, 36, 3, 22, 1], [1, 1, 2, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 1, 3, 2, 2, 3, 1, 1, 35, 1, 43, 5, 51, 1], [1, 1, 2, 3, 1, 2, 2, 1, 3, 1, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 41, 2, 22, 3, 47, 1], [1, 1, 1, 1, 2, 3, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2, 1, 3, 37, 4, 16, 5, 51, 2], [1, 1, 1, 2, 2, 2, 2, 2, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 2, 1, 22, 4, 13, 1, 47, 3], [1, 1, 2, 3, 1, 1, 1, 1, 2, 1, 1, 2, 2, 3, 2, 1, 1, 2, 1, 1, 49, 4, 24, 1, 37, 4], [1, 3, 2, 2, 3, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 3, 2, 1, 3, 1, 12, 1, 14, 3, 17, 1], [1, 1, 1, 1, 2, 2, 3, 3, 1, 2, 3, 2, 2, 1, 2, 1, 1, 1, 2, 1, 17, 1, 41, 1, 43, 4], [1, 3, 3, 3, 3, 3, 1, 1, 2, 3, 1, 1, 3, 2, 3, 1, 1, 3, 3, 2, 45, 2, 43, 2, 13, 1], [2, 1, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 1, 3, 3, 1, 1, 2, 2, 1, 14, 1, 18, 3, 44, 1], [2, 1, 1, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 2, 1, 49, 1, 39, 3, 50, 2], [1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 3, 1, 3, 1, 1, 3, 1, 36, 1, 20, 1, 38, 1], [3, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 41, 3, 36, 4, 44, 1], [2, 1, 3, 3, 1, 3, 1, 1, 2, 1, 2, 2, 1, 2, 3, 2, 1, 1, 2, 1, 47, 1, 11, 3, 51, 1], [2, 1, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2, 3, 2, 1, 2, 1, 1, 1, 1, 37, 1, 11, 5, 17, 1], [1, 3, 3, 1, 2, 3, 2, 1, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 2, 1, 10, 1, 36, 1, 38, 1], [1, 1, 2, 1, 1, 2, 2, 3, 1, 1, 2, 1, 2, 3, 1, 3, 2, 1, 1, 2, 20, 1, 10, 3, 18, 1], [1, 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 2, 3, 2, 3, 1, 3, 3, 2, 3, 49, 4, 43, 1, 14, 1], [2, 2, 1, 1, 1, 1, 2, 3, 1, 1, 2, 2, 2, 3, 2, 1, 1, 1, 2, 1, 40, 3, 43, 2, 44, 1], [1, 1, 1, 1, 2, 2, 2, 3, 3, 1, 2, 2, 1, 1, 2, 3, 2, 1, 3, 1, 50, 3, 10, 2, 37, 2], [1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 3, 2, 1, 1, 3, 2, 1, 20, 1, 11, 5, 17, 3], [1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 3, 1, 1, 1, 2, 1, 44, 3, 20, 3, 18, 1], [2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 41, 4, 39, 2, 10, 3], [1, 1, 3, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 2, 1, 22, 3, 17, 4, 43, 2], [2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 1, 1, 1, 2, 1, 16, 3, 49, 4, 35, 1], [1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 3, 1, 1, 2, 1, 2, 2, 1, 49, 3, 24, 1, 36, 2], [2, 2, 1, 1, 1, 3, 2, 3, 3, 1, 1, 1, 1, 3, 2, 1, 2, 2, 3, 2, 39, 2, 35, 2, 42, 1], [2, 2, 3, 3, 3, 1, 1, 1, 2, 1, 3, 2, 1, 2, 3, 1, 1, 1, 1, 1, 17, 4, 39, 3, 46, 2], [1, 1, 3, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 42, 1, 40, 3, 44, 3], [2, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 3, 1, 1, 2, 1, 19, 4, 40, 5, 21, 1], [1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 2, 2, 3, 3, 3, 2, 2, 1, 2, 1, 14, 1, 39, 1, 24, 2], [1, 1, 1, 1, 1, 2, 2, 3, 3, 1, 2, 2, 2, 3, 1, 1, 1, 1, 2, 1, 40, 2, 50, 2, 38, 4], [2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 3, 2, 1, 2, 1, 1, 1, 47, 5, 40, 3, 35, 4], [2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 3, 2, 2, 1, 1, 2, 1, 43, 5, 21, 1, 19, 1], [1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 3, 1, 3, 1, 2, 1, 1, 1, 2, 1, 21, 5, 16, 1, 39, 1], [1, 1, 1, 3, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 3, 2, 1, 1, 1, 1, 48, 2, 18, 4, 13, 4], [1, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 3, 3, 2, 2, 1, 3, 3, 45, 3, 49, 4, 42, 1], [1, 1, 1, 1, 2, 2, 2, 3, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 46, 3, 44, 1, 51, 1], [1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 1, 1, 20, 1, 41, 2, 39, 4], [1, 1, 3, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 1, 2, 3, 47, 4, 20, 3, 49, 3], [1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 1, 1, 1, 3, 1, 17, 3, 16, 5, 14, 4], [1, 1, 2, 1, 1, 2, 3, 3, 2, 2, 2, 2, 1, 3, 2, 3, 2, 1, 2, 1, 47, 5, 12, 2, 51, 1], [2, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 2, 2, 1, 1, 3, 1, 1, 2, 1, 41, 3, 46, 4, 43, 4], [1, 1, 1, 3, 2, 1, 3, 3, 1, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 1, 39, 2, 50, 1, 44, 1], [1, 1, 1, 2, 2, 1, 2, 3, 3, 2, 3, 3, 2, 2, 3, 3, 2, 2, 2, 2, 18, 4, 40, 2, 21, 5], [1, 1, 1, 3, 2, 3, 2, 1, 2, 1, 1, 2, 1, 1, 3, 1, 1, 1, 2, 1, 11, 5, 43, 4, 25, 5]]
    resultat = Array.new(profil_db.length)

    for i in 0..(profil_db.length-1)
        resultat[i] = distance_tab(profil,profil_db[i])
    end

    minimun = resultat.min
    return resultat.find_index(minimun)

  end

  def calcul_score(indice_profil)
    q = NMatrix[[0.06938331430170043, 0.06553998125964486, 0.34338167312810836, 0.08493466649688543, 0.2669228740350399], [0.0, 0.0, 0.0, 0.0, 2.6592839751111463], [0.0, 0.0, 0.003989984533886254, 0.16383058383922966, 0.0], [0.0, 0.0, 0.9749476110438619, 0.0, 0.0], [0.2984627031588159, 0.03685511647426458, 0.030335644893937856, 0.0, 0.247250085055421], [2.1369091297907756, 0.0, 0.16306530127752947, 0.0, 0.06714709406078427], [0.11696563465433378, 0.08384049674299857, 0.0, 0.14512138195673852, 1.1004439756164848], [0.0, 0.0, 1.112535857300279, 0.0, 0.0], [0.0, 0.0, 0.37709028615413515, 0.0, 0.36772579604402816], [0.0, 0.0, 0.014582853799140592, 0.3220620716128275, 0.12262780740860124], [0.22673897123254177, 0.0, 1.138734318634224, 0.0, 0.0], [0.11520252582657359, 0.3916069317233857, 0.0, 0.3859580456168691, 0.02892469514270148], [0.16066307993602397, 0.0, 0.006664996500655803, 0.045510494700815286, 0.023206318279297367], [0.0, 0.5169486385080683, 0.0, 0.02785915363233248, 0.7326664468099818], [0.0, 0.0, 1.3975690266947611, 0.22148407336979883, 0.25581515611718647], [0.4264709626451574, 0.0771335186536781, 0.458484489411408, 0.06359913466509064, 0.0], [3.9596308728562413, 0.0, 0.0, 0.0, 0.0], [0.06893041014582951, 0.17977637328057394, 0.12086056188532981, 0.0, 0.015694497647699906], [0.5819530997260828, 0.0, 0.0, 1.5810102780644277, 0.07356171447768375], [0.0, 0.0, 1.9512116100634087, 0.009732526833127184, 0.0], [0.3671447352546258, 1.4102985241576047, 0.0, 0.30054397054992965, 0.0], [0.0, 0.0, 0.10336106764302859, 0.01909531270377856, 0.6312137524144209], [0.0, 3.3575929339210133, 0.0, 0.0, 0.0], [0.0, 0.5661123608022628, 0.30079676290236623, 0.01047624925509261, 0.0], [0.0, 0.05590194586797671, 0.0, 0.2092200777590454, 0.16875473428503412], [0.0, 0.602272792552142, 0.0, 0.09378049549559257, 0.0], [0.0, 0.0, 0.0735405638226891, 2.17585907327904, 0.0], [0.14933146192077812, 0.0, 0.11569765818550276, 0.0, 0.0], [0.5486097900362703, 0.024365391135576925, 0.0, 0.3802551885255022, 0.0], [0.10800270234641263, 0.05668970658919915, 0.02619813555957898, 0.25030184572353714, 0.0], [0.3261113795714872, 0.2874816741922557, 0.2416648234016301, 0.02764618448857389, 0.0]]
    p = NMatrix[[0.03773014532456471, 0.0016117540090827007, 0.12266024897088805, 0.001580765227995626, 0.41287772954428226], [0.0, 0.0, 0.0, 0.1115098114634312, 1.462930509290372], [0.0, 1.2541392330063412, 0.0442245362318334, 0.0, 0.0], [0.10009520766038242, 0.0, 0.21961153874159092, 0.0, 0.0], [0.07939544823200219, 0.0, 1.170881598206332, 0.01774417801859422, 0.0], [0.5608697346277717, 0.0, 0.3253118647987791, 0.0, 0.0], [0.14949196482170066, 0.007473102790647614, 0.0, 0.5326508597475307, 0.0], [0.0, 0.0, 1.3093590368492074, 0.0, 0.0], [0.0, 0.0, 0.41846605898198275, 0.020877025172169616, 0.2252702123737194], [0.0, 0.08776213227550385, 0.3602782626655114, 0.026726486611933508, 0.02185244802048694], [0.0815826524082997, 0.38878515465293023, 0.0, 0.16388054941739477, 0.018738634948708977], [0.0002738554779096954, 0.0, 0.0, 0.08890335855613524, 0.8173666966938912], [0.08755643037702113, 0.10855922274779646, 0.16806803377036864, 0.0, 0.0], [0.002929519206987646, 0.048438045019918066, 0.2147242554965845, 0.0, 0.05841739102230377], [0.06147033507839803, 0.6282406597470285, 0.018914400023194153, 0.26863472792071796, 0.0], [1.0210068010729247, 0.0, 0.0, 0.8256814966661806, 0.0], [1.1268847101818726, 0.0, 0.0, 0.07853316431849497, 0.0], [0.026119174067034314, 0.02267819849584835, 0.03472335695481718, 0.05739032729051937, 0.0], [0.0, 0.0, 0.5533926813873683, 0.0, 1.2515688152187705], [0.0, 0.0, 0.0, 2.195649682268939, 0.0], [0.20952548248497407, 0.0, 0.019935038862732003, 0.0, 0.09493946395123684], [0.0, 0.09074216575049268, 0.0, 0.11471098710326068, 0.2711813485821848], [0.05613740048389469, 0.04497907403665629, 0.11060773069206668, 0.0009775883508998365, 0.09432284587699931], [0.01643971028583435, 0.0, 0.06628363626231816, 0.13010039117962457, 0.11272432845801192], [0.006997393088798471, 0.04910643426757573, 0.0, 0.11294631927801643, 0.29225181771450726], [0.0, 0.029889064221484615, 0.0, 0.8279064038001475, 0.13776652609871584], [0.7543636038494372, 0.0, 0.0, 0.0, 0.0], [0.9336772610212948, 0.0, 0.025954025494075106, 0.0, 0.0], [0.9581393998151346, 0.0, 0.0, 0.23185715349789632, 0.0], [0.0, 0.0, 1.6979009911488558, 0.0, 0.0], [0.5620221082143768, 0.0, 0.0, 0.0, 0.0], [0.08513524682992535, 0.014143041970820771, 0.10419675373168058, 0.44686279528157086, 0.0], [0.0, 1.1742559996845676, 0.12691361054796216, 0.0, 0.0], [0.011346877970672022, 0.2515680460738673, 0.0, 0.47031666709904063, 0.0], [1.2608828858399408, 0.0, 0.010987404336854686, 0.0, 0.0], [0.0, 0.05687716213657063, 0.06069194109275012, 1.0058466867851137, 0.0], [0.8411849213127534, 0.0, 0.0, 0.051370662678758845, 0.0], [0.0419518809609612, 0.0034790353053904635, 0.0, 0.020019715277508142, 0.1887470204951288], [0.0, 1.0266892069273121, 0.0, 0.0, 0.05883662567487309], [0.0, 0.46843947574971007, 0.08243997568561129, 0.0042191226995971194, 0.003701149456609223], [0.0, 0.0333963043240255, 0.3681127527246249, 0.0, 0.0], [0.07209413334301058, 0.0, 0.0, 0.6950368342911055, 0.0], [0.017438671049550766, 0.01336372606428879, 0.054904026218017425, 0.0399234648905115, 0.007086396711829276], [0.10489884049838236, 0.338163906968182, 0.1890501010071766, 0.08449126790274131, 0.0], [0.0, 0.0, 0.0, 0.2282447397456427, 0.819251231562942], [0.1604562746611288, 0.0, 0.0, 0.0, 1.49183066892273], [0.020931352228350103, 0.018144910662873562, 0.08851926010838117, 0.005819787737992003, 0.021009104681295607], [0.0, 0.003503595922444165, 0.2086144732108704, 0.05259556138361504, 0.07863766875754423], [0.09795638778988167, 0.2280116028878789, 0.0, 0.1536977382446042, 0.0015262728801319972], [0.0, 0.4885314058741634, 0.6035074140282015, 0.0, 0.0], [0.3839718185540426, 0.0, 0.035671684683750135, 0.04474281251361169, 0.034230811790348196], [0.0, 0.0, 0.0, 0.0, 1.740624438419323], [0.0, 0.1072210338038981, 0.1969754190479374, 0.10085383654867777, 0.013644987428919954], [0.08225185123182278, 0.3693568637902882, 0.050515129784969144, 0.5272022779635873, 0.0454249609202896], [0.001411351710225173, 0.5443710905044931, 0.0, 0.1436130170528907, 0.43050965171883804], [0.38378591048691385, 0.0, 0.1443642217274814, 0.14153006882058694, 0.01385556680703909], [0.11115935175217874, 0.0013498535950401864, 0.07427569574179119, 0.14052572501535787, 0.0], [0.013403516087669267, 0.0, 0.2593401119304332, 0.42936271276988985, 0.09422831794970707], [0.05052898016419954, 0.055309011529046735, 0.0, 0.6531196961927596, 0.44366887243969666], [0.0, 0.1014135195118692, 0.6861826609299633, 0.0, 0.011948060935950307], [0.0, 0.0, 1.2436923764218, 0.0, 0.0656929600005915], [0.04239369318922198, 0.0, 0.0, 0.2014333784664647, 0.02642582732092982], [0.0, 0.04608867543329024, 0.4434501005428281, 0.029415283800185866, 0.0], [0.0, 0.0, 1.1079844199517792, 1.404076203664489, 0.0], [0.0, 1.154700262591284, 0.11512645170169573, 0.0, 0.0], [0.14545311649556616, 0.0, 0.5679278897164876, 0.13292195974785515, 0.0], [0.0, 0.0, 0.86355828455467, 0.0, 0.0], [0.08377271324390145, 0.0, 0.0, 0.2521073796329893, 0.10229452942184314], [0.005552517571592422, 0.18109642549238503, 0.04707454905422807, 0.019499210034866616, 0.0], [0.08050077482070078, 0.14652614781396264, 0.0, 0.8845808704618825, 0.0], [0.0, 0.0, 0.0, 1.3598831382724093, 0.0], [0.5583891568251231, 0.0, 0.010226254759283794, 0.0, 0.45663661016206253], [0.0, 0.0, 0.0, 1.4132406644113813, 0.0], [0.000945391736022028, 1.3817036904252107, 0.0, 0.03573183296218733, 0.0], [0.031070438727106048, 0.0202924077900128, 0.004992527025418324, 0.42304210744387966, 0.0], [0.0, 0.0, 1.4135022717455488, 0.0, 0.0], [0.0, 1.0425783547306964, 0.0, 0.0, 1.7089966898270634], [0.0, 0.1464098844256227, 0.1470397210375356, 0.0, 0.17879940650650292], [0.0, 0.01055102518168702, 1.0800327767393019, 0.06453255632241661, 0.05346797105792766], [1.0610342629791636, 0.2370304319947631, 0.0, 0.0, 0.0], [0.0, 0.13366975570617987, 0.13018274636328078, 0.005473223293218611, 0.6622797068139802], [0.42070864840078154, 0.0, 0.27920543418042854, 0.0, 0.0], [0.016203489117453077, 0.0029449869027799664, 0.14910422128680373, 0.006340361998362707, 0.10288835634607822], [0.0, 0.0, 0.40669219787130084, 0.0, 0.0], [0.04017298568069653, 0.43518313677821713, 0.013038427159411517, 0.06447630162591417, 0.20588635895459337], [0.05212113758703581, 0.0, 0.0, 0.8632707902375916, 0.03837052822666066]]

    tab_profil_final = []
    tab_profil_final.push(p[indice_profil*5],p[indice_profil*5+1],p[indice_profil*5+2],p[indice_profil*5+3],p[indice_profil*5+4])
    new_profil_narray = NArray.to_na(tab_profil_final)

    new_profil_vector=NMatrix[new_profil_narray]
    #new_profil de type [1,10]
    resultat = new_profil_vector * q.transpose


    return resultat.to_a[0]
  end

  def somme_tab(tab)
    somme = 0
    tab.each do |val|
      somme = somme + val
    end
    return somme
  end

  def prevision_product(tab)

    nbE = 5

    tab1 = tab.max(nbE)
    tab2=[]
    tab_exp =[]
    somme = 0

    tab1.each do |val|
      tab2.push(tab.find_index(val))
      val_exp = 2**(2*val)
      tab_exp.push(val_exp)
      somme=somme+val_exp
    end

    p tab2

    tab_exp.each_with_index do |value,index|
      tab_exp[index]=tab_exp[index]/somme*100
    end

    # Début prévision
    proba = NArray.to_na(tab_exp).cumsum
    predictions = []
    valeur_possible = tab2

    p "Avant boucle 1"
    p tab_exp
    p predictions
    p valeur_possible

    u = rand(100)

    for i in 0..(nbE-1)
      if u < proba[i]
        tab_exp.delete_at(i)
        value_f = valeur_possible[i]
        valeur_possible.delete_at(i)
        predictions.push(value_f)
        break
      end
    end

    p "Sortie boucle 1"
    p tab_exp
    p predictions
    p valeur_possible


    somme_tmp = somme_tab(tab_exp)

    tab_exp.each_with_index do |value,index|
      tab_exp[index]=tab_exp[index]/somme_tmp*100
    end

    proba1 = NArray.to_na(tab_exp).cumsum

    r = rand(100)

    p "Avant boucle 2"
    p tab_exp
    p predictions
    p valeur_possible

    for i in 0..(nbE-2)
      if r < proba1[i]
        tab_exp.delete_at(i)
        value_f = valeur_possible[i]
        valeur_possible.delete_at(i)
        predictions.push(value_f)
        break
      end
    end

    p "Sortie boucle 2"
    p tab_exp
    p predictions
    p valeur_possible

    somme_tmp = somme_tab(tab_exp)

    tab_exp.each_with_index do |value,index|
      tab_exp[index]=tab_exp[index]/somme_tmp*100
    end


    p "Avant boucle 3"
    p tab_exp
    p predictions
    p valeur_possible

    proba2 = NArray.to_na(tab_exp).cumsum

    r = rand(100)

    for i in 0..(nbE-3)
      if r < proba2[i]
        predictions.push(valeur_possible[i])
        break
      end
    end

    p "Sortie boucle 3"
    p tab_exp
    p predictions
    p valeur_possible


    return predictions
  end


end
