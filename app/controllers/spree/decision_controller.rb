class Spree::DecisionController < Spree::BaseController
  require 'spree/base_controller'
  require 'rubygems'
  require 'decisiontree'
  require 'narray'

  def index
  end


  def new
    @questions = QuestionDecision.all

    render :json => @questions.to_json(
        :only => [:statement, :id, :typeq],
        :include => [
            :answers => { :only => [:content]}])

  end

  def score
    @profil = Profil.new
    reponse = params[:decision]['_json']

    params[:decision]['_json'].each_with_index do |reponse,index|
      @profil.update_rep((index+1),reponse)
    end

    if @profil.save
      @url= []
      @id = []
      @description = []
      @name = []
      @price = []

      tab_a_chercher = calcul(reponse)

      tab_a_chercher.each do |indice_product|
          product = Spree::Product.order('id').offset(indice_product).first
          @id.push(product.id)
          @url.push(spree.product_path(product))
          @description.push(product.description)
          @name.push(product.slug)
          @price.push(product.price.to_s)
      end

      #Spree::Product.order("RANDOM()").limit(3).each do |product|
       # @id.push(product.id)
        #@url.push(spree.product_path(product))
        #@description.push(product.description)
        #@name.push(product.slug)
        #@price.push(product.price.to_s)
      #end

      render :json => {'id' => @id, 'url' => @url, 'description' => @description,'name' => @name,'price'=>@price}
    else
      render :json => 'error'.to_json
    end

  end



  def view
  end

  def train(profil)
    #Spree::Product.with_property('Dimension')
    #[0,0,0,0,0,1,1,1,1,1,2,2,2,2,2]

    attributes = ['Ouverture', 'Conscienciosité', 'Extraversion', 'Agréabilité','Neuroticisme', 'Sport','Technologie','Culture','Ecologie','Gastronomie','Genre','Age','Prix','Alcool','Objet']
    training = []

    Spree::Product.with_property('Dimension').each do |product|
      training.push(product.properties.dimension,product.id)
    end

    dec_tree = DecisionTree::ID3Tree.new(attributes, training, 1, :continuous)
    dec_tree.train

    decision = dec_tree.predict(profil)

    return decision

  end

  def test_algo
    profil =[]

    for i in 0..18
          profil.push(1)
    end

    return calcul(profil)
  end

  def calcul(profil)

    indice_pro = profil_return(profil)
    tab_score = calcul_score(indice_pro)
    previsions = prevision_product(tab_score)

    #previsions renvoit les indices de cadeau à choisir. Position dans l'ordre
    #Spree::Product.limit(1).offset(10)
    #Spree::Product.offset(10).first
    p previsions
    return previsions

  end

  def recup_tableau_profil

    tableauprofil = ReverseProfil.where('instanciation':1).all

    tab = []

    tableauprofil.each do |profil|
      tableau = []
      tableau.push(profil.rep1,profil.rep2,profil.rep3,profil.rep4,profil.rep5,profil.rep6,profil.rep7,profil.rep8,profil.rep9,profil.rep10,profil.rep11,profil.rep12,profil.rep13,profil.rep14,profil.rep15,profil.rep16,profil.rep17,profil.rep18,profil.rep19,profil.rep20,profil.item1,profil.item1mark,profil.item2,profil.item2mark,profil.item3,profil.item3mark)
      tab.push(tableau)
    end

    p 'ici tableau fini'
    p tab
    return tab

  end

  def distance_tab(tab1,tab2)
    #tab1, tab2 sont 2 1-D array

    resultat = 0
    for i in 0..tab1.length
      if tab1[i] == tab2[i]
        resultat = resultat +1
      end
    end
    return resultat
  end

  def profil_return(profil)
    #profil_db = recup_tableau_profil
    profil_db = [[1, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 3, 1, 2, 1, 1, 1, 1, 1, 42, 4, 10, 3, 14, 3], [1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 1, 19, 2, 39, 1, 11, 5], [1, 1, 2, 1, 3, 2, 2, 3, 1, 1, 2, 2, 2, 1, 1, 3, 2, 1, 2, 1, 51, 1, 43, 5, 44, 2], [1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 3, 2, 1, 3, 1, 1, 1, 1, 21, 1, 16, 1, 13, 1], [1, 1, 1, 2, 2, 2, 3, 3, 2, 1, 2, 2, 2, 3, 2, 2, 1, 2, 1, 2, 36, 4, 21, 5, 35, 3], [1, 1, 1, 3, 1, 2, 2, 3, 2, 1, 2, 1, 2, 2, 1, 1, 2, 1, 1, 1, 16, 5, 36, 4, 18, 1], [1, 1, 1, 3, 1, 3, 2, 1, 2, 3, 1, 2, 1, 2, 3, 2, 1, 2, 2, 1, 46, 1, 47, 2, 37, 1], [2, 1, 1, 3, 1, 2, 2, 1, 1, 2, 1, 2, 1, 3, 2, 1, 1, 1, 3, 1, 40, 5, 18, 2, 10, 3], [2, 2, 1, 3, 2, 2, 1, 1, 2, 1, 1, 1, 1, 3, 3, 3, 2, 1, 2, 1, 13, 3, 17, 2, 35, 1], [1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 3, 1, 1, 51, 1, 44, 2, 35, 2], [2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 3, 1, 2, 1, 1, 41, 4, 50, 2, 14, 2], [2, 1, 3, 3, 1, 1, 3, 1, 2, 2, 2, 2, 2, 2, 3, 1, 3, 3, 1, 2, 42, 5, 45, 2, 17, 4], [1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 1, 1, 1, 1, 2, 38, 1, 51, 5, 36, 1], [2, 1, 1, 2, 2, 2, 2, 3, 3, 1, 3, 2, 2, 3, 1, 3, 1, 3, 2, 1, 51, 1, 13, 2, 25, 1], [1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 1, 44, 2, 22, 3, 41, 5], [2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 3, 2, 1, 1, 1, 2, 1, 1, 1, 1, 36, 1, 37, 5, 39, 5], [1, 1, 1, 1, 3, 1, 2, 1, 2, 1, 3, 2, 1, 1, 2, 1, 2, 1, 1, 1, 16, 4, 37, 4, 47, 1], [1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 48, 1, 51, 1, 50, 2], [1, 1, 1, 1, 3, 2, 2, 3, 2, 3, 2, 2, 2, 3, 2, 3, 1, 2, 1, 3, 35, 4, 11, 4, 19, 2], [1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 3, 2, 2, 1, 2, 1, 3, 1, 2, 1, 47, 5, 50, 1, 39, 4], [1, 1, 2, 1, 1, 3, 1, 1, 3, 1, 2, 1, 1, 3, 3, 1, 1, 1, 3, 2, 14, 1, 16, 2, 42, 1], [1, 2, 1, 3, 2, 2, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 3, 1, 2, 45, 3, 46, 2, 17, 2], [1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 1, 1, 1, 51, 2, 14, 2, 10, 2], [1, 1, 1, 1, 1, 2, 2, 1, 2, 3, 3, 2, 1, 1, 3, 1, 1, 1, 2, 1, 20, 3, 24, 4, 19, 2], [1, 2, 1, 3, 1, 3, 1, 1, 1, 2, 1, 2, 3, 2, 2, 3, 1, 1, 2, 1, 22, 2, 42, 1, 17, 2], [1, 1, 1, 1, 3, 1, 2, 2, 2, 2, 3, 2, 1, 1, 2, 3, 1, 1, 3, 1, 10, 1, 47, 3, 25, 2], [2, 1, 1, 3, 1, 2, 1, 1, 2, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 48, 2, 22, 1, 37, 4], [1, 1, 1, 2, 2, 2, 2, 3, 2, 1, 3, 2, 2, 1, 2, 2, 2, 1, 1, 1, 21, 1, 37, 5, 22, 1], [2, 1, 1, 1, 2, 2, 3, 3, 2, 2, 3, 2, 2, 3, 1, 3, 2, 1, 2, 3, 37, 5, 11, 0, 39, 2], [1, 1, 1, 3, 2, 3, 1, 1, 2, 1, 1, 2, 2, 2, 3, 1, 1, 1, 3, 1, 13, 5, 35, 3, 40, 4], [2, 1, 1, 3, 2, 1, 3, 1, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 1, 3, 38, 1, 24, 1, 37, 3], [1, 1, 1, 1, 2, 2, 2, 3, 1, 2, 3, 2, 1, 1, 1, 1, 1, 3, 1, 2, 39, 2, 36, 3, 22, 1], [1, 1, 2, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 1, 3, 2, 2, 3, 1, 1, 35, 1, 43, 5, 51, 1], [1, 1, 2, 3, 1, 2, 2, 1, 3, 1, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 41, 2, 22, 3, 47, 1], [1, 1, 1, 1, 2, 3, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 2, 1, 3, 37, 4, 16, 5, 51, 2], [1, 1, 1, 2, 2, 2, 2, 2, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 2, 1, 22, 4, 13, 1, 47, 3], [1, 1, 2, 3, 1, 1, 1, 1, 2, 1, 1, 2, 2, 3, 2, 1, 1, 2, 1, 1, 49, 4, 24, 1, 37, 4], [1, 3, 2, 2, 3, 2, 2, 1, 2, 2, 3, 2, 2, 2, 3, 3, 2, 1, 3, 1, 12, 1, 14, 3, 17, 1], [1, 1, 1, 1, 2, 2, 3, 3, 1, 2, 3, 2, 2, 1, 2, 1, 1, 1, 2, 1, 17, 1, 41, 1, 43, 4], [1, 3, 3, 3, 3, 3, 1, 1, 2, 3, 1, 1, 3, 2, 3, 1, 1, 3, 3, 2, 45, 2, 43, 2, 13, 1], [2, 1, 1, 2, 2, 3, 3, 3, 2, 2, 2, 2, 1, 3, 3, 1, 1, 2, 2, 1, 14, 1, 18, 3, 44, 1], [2, 1, 1, 1, 2, 2, 3, 3, 2, 2, 2, 2, 2, 3, 2, 2, 2, 1, 2, 1, 49, 1, 39, 3, 50, 2], [1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 3, 1, 3, 1, 1, 3, 1, 36, 1, 20, 1, 38, 1], [3, 2, 2, 2, 2, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 41, 3, 36, 4, 44, 1], [2, 1, 3, 3, 1, 3, 1, 1, 2, 1, 2, 2, 1, 2, 3, 2, 1, 1, 2, 1, 47, 1, 11, 3, 51, 1], [2, 1, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2, 3, 2, 1, 2, 1, 1, 1, 1, 37, 1, 11, 5, 17, 1], [1, 3, 3, 1, 2, 3, 2, 1, 2, 2, 2, 2, 3, 3, 3, 2, 3, 3, 2, 1, 10, 1, 36, 1, 38, 1], [1, 1, 2, 1, 1, 2, 2, 3, 1, 1, 2, 1, 2, 3, 1, 3, 2, 1, 1, 2, 20, 1, 10, 3, 18, 1], [1, 3, 3, 3, 1, 3, 1, 1, 2, 1, 1, 2, 3, 2, 3, 1, 3, 3, 2, 3, 49, 4, 43, 1, 14, 1], [2, 2, 1, 1, 1, 1, 2, 3, 1, 1, 2, 2, 2, 3, 2, 1, 1, 1, 2, 1, 40, 3, 43, 2, 44, 1], [1, 1, 1, 1, 2, 2, 2, 3, 3, 1, 2, 2, 1, 1, 2, 3, 2, 1, 3, 1, 50, 3, 10, 2, 37, 2], [1, 1, 1, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 3, 2, 1, 1, 3, 2, 1, 20, 1, 11, 5, 17, 3], [1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 1, 1, 1, 2, 3, 1, 1, 1, 2, 1, 44, 3, 20, 3, 18, 1], [2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 41, 4, 39, 2, 10, 3], [1, 1, 3, 1, 1, 2, 1, 1, 2, 1, 2, 2, 1, 3, 1, 1, 1, 1, 2, 1, 22, 3, 17, 4, 43, 2], [2, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 3, 1, 1, 1, 2, 1, 16, 3, 49, 4, 35, 1], [1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 2, 2, 3, 1, 1, 2, 1, 2, 2, 1, 49, 3, 24, 1, 36, 2], [2, 2, 1, 1, 1, 3, 2, 3, 3, 1, 1, 1, 1, 3, 2, 1, 2, 2, 3, 2, 39, 2, 35, 2, 42, 1], [2, 2, 3, 3, 3, 1, 1, 1, 2, 1, 3, 2, 1, 2, 3, 1, 1, 1, 1, 1, 17, 4, 39, 3, 46, 2], [1, 1, 3, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 42, 1, 40, 3, 44, 3], [2, 1, 1, 3, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 2, 3, 1, 1, 2, 1, 19, 4, 40, 5, 21, 1], [1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 2, 2, 3, 3, 3, 2, 2, 1, 2, 1, 14, 1, 39, 1, 24, 2], [1, 1, 1, 1, 1, 2, 2, 3, 3, 1, 2, 2, 2, 3, 1, 1, 1, 1, 2, 1, 40, 2, 50, 2, 38, 4], [2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 1, 3, 2, 1, 2, 1, 1, 1, 47, 5, 40, 3, 35, 4], [2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 2, 1, 3, 2, 2, 1, 1, 2, 1, 43, 5, 21, 1, 19, 1], [1, 1, 1, 1, 1, 2, 2, 2, 1, 2, 3, 1, 3, 1, 2, 1, 1, 1, 2, 1, 21, 5, 16, 1, 39, 1], [1, 1, 1, 3, 2, 2, 1, 1, 2, 1, 2, 2, 1, 2, 3, 2, 1, 1, 1, 1, 48, 2, 18, 4, 13, 4], [1, 2, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 3, 3, 2, 2, 1, 3, 3, 45, 3, 49, 4, 42, 1], [1, 1, 1, 1, 2, 2, 2, 3, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 46, 3, 44, 1, 51, 1], [1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 2, 2, 2, 1, 1, 1, 1, 20, 1, 41, 2, 39, 4], [1, 1, 3, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 3, 1, 1, 1, 2, 3, 47, 4, 20, 3, 49, 3], [1, 1, 1, 1, 1, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 1, 1, 1, 3, 1, 17, 3, 16, 5, 14, 4], [1, 1, 2, 1, 1, 2, 3, 3, 2, 2, 2, 2, 1, 3, 2, 3, 2, 1, 2, 1, 47, 5, 12, 2, 51, 1], [2, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 2, 2, 1, 1, 3, 1, 1, 2, 1, 41, 3, 46, 4, 43, 4], [1, 1, 1, 3, 2, 1, 3, 3, 1, 1, 3, 2, 3, 3, 2, 2, 2, 1, 1, 1, 39, 2, 50, 1, 44, 1], [1, 1, 1, 2, 2, 1, 2, 3, 3, 2, 3, 3, 2, 2, 3, 3, 2, 2, 2, 2, 18, 4, 40, 2, 21, 5], [1, 1, 1, 3, 2, 3, 2, 1, 2, 1, 1, 2, 1, 1, 3, 1, 1, 1, 2, 1, 11, 5, 43, 4, 25, 5]]
    resultat = Array.new(profil_db.length)

    for i in 0..(profil_db.length-1)
        resultat[i] = distance_tab(profil,profil_db[i])
    end

    minimun = resultat.min
    return resultat.find_index(minimun)

  end

  def calcul_score(indice_profil)
    q = NMatrix[[0.0, 0.0, 0.3511019302201012, 0.0, 0.5393421562055869], [0.05856763035978281, 2.178685863637192, 0.0, 0.03424316991224243, 0.0], [0.0, 0.0, 0.0, 0.22741760715827686, 0.006654073149679367], [0.0, 0.0, 0.9305401012464709, 0.0, 0.029471309106594314], [0.11221612982295975, 0.0, 0.0, 0.0, 0.7990262900678067], [1.9561499788992784, 0.0, 0.07708116560322358, 0.0, 0.31974760362136495], [0.0, 0.26818441761744416, 0.0, 0.0, 1.5344841886141796], [0.00501727721501056, 0.0, 0.9340319442335258, 0.0, 0.007372216490505243], [0.0, 0.3346573936689715, 0.47505405767453873, 0.0, 0.0], [0.0, 0.06749337910829901, 0.002604212594906221, 0.3929396066451424, 0.07079357180086959], [0.19878749399175394, 0.0, 1.2262910941575065, 0.0, 0.0], [0.06575080786949744, 0.0, 0.0, 0.27772799970944206, 0.8074088853520618], [0.20953927124710878, 0.01303999305482743, 0.013623206211996072, 0.05288904626563703, 0.0006956410087635285], [0.0, 0.7722208654650873, 0.0, 0.10374764745810396, 0.0], [0.0, 0.2501850069378165, 0.9932483099505711, 0.45894866706788784, 0.0], [0.43004697686874127, 0.0, 0.41795166271372475, 0.0, 0.3759031178810813], [4.1531534861441335, 0.0, 0.0, 0.0, 0.0], [0.08043744689895427, 0.0, 0.16035236195404043, 0.0, 0.0], [0.9719163743401272, 0.0, 0.0, 0.6444635563733208, 0.8382336601332665], [0.0, 0.0, 2.284521845583156, 0.042391766481209806, 0.0], [0.0, 0.0016315557707064375, 0.0, 0.0, 1.6907791438848345], [0.0, 0.0, 0.029299726930217027, 0.0, 0.8023921124113365], [0.0, 2.4176603497168965, 0.0, 0.0, 0.14330282604250233], [0.0, 0.1400870995673595, 0.2823823517772447, 0.0, 0.31957482282218824], [0.0, 0.016954108092467786, 0.0, 0.007583876083659515, 0.35659572035021575], [0.0, 0.19889985062110815, 0.0, 0.0, 0.48841285758802633], [0.0, 0.0, 0.0, 2.818781863552551, 0.0], [0.18401279289234782, 0.0, 0.1031448526948527, 0.0, 0.0], [0.7103522151385118, 0.025036469817379246, 0.0, 0.5711786039771107, 0.0], [0.14669298859596028, 0.0, 0.04747969488863889, 0.13684344465700532, 0.22764845791570842], [0.33468120616033986, 0.24076904898079432, 0.013239219914341677, 0.1289142299409469, 0.0]]
    p = NMatrix[[0.0, 0.0, 0.07368937728826327, 0.0, 0.804519896060361], [0.041753629938832366, 0.9966207961156262, 0.04461220063489915, 0.04357665539895511, 0.0], [0.00045878714393873636, 1.0875607127728042, 0.006577886789150468, 0.0, 0.04008974817257895], [0.08720282566402636, 0.0, 0.21538305641757113, 0.0, 0.008936201365261827], [0.07959832354130986, 0.013765426373457254, 1.0543444339060675, 0.06727307602255177, 0.08228972686622414], [0.4752109731214378, 0.0, 0.2543236102879966, 0.0, 0.2384149154618959], [0.1516548215971226, 0.0, 0.0, 0.5920938561480812, 0.0], [0.0, 0.0, 1.4154523087282005, 0.0, 0.09879822690563926], [0.0, 0.02813537729780159, 0.3563042011642491, 0.0, 0.32946579542996496], [0.0, 0.07289698184925053, 0.24344073817824083, 0.0921554098352053, 0.041124478928479806], [0.0, 0.0, 0.0, 0.0, 0.9872520021945841], [0.0, 0.0, 0.0, 0.0, 1.2162274584702473], [0.08962712193923757, 0.09837866020386099, 0.05068147040871752, 0.051569894525049995, 0.006397727115904339], [0.008341974237016408, 0.08012633939959243, 0.18097512473084637, 0.010183376320421801, 0.0], [0.0, 0.0, 0.0, 0.0, 1.289480268127599], [1.1029350749798676, 0.0, 0.0, 0.189761868902628, 0.2743251415099303], [1.054441060819606, 0.0, 0.0, 0.17664215656619725, 0.0], [0.030025260987455598, 0.015533264341525771, 0.014365389577539371, 0.03495993511389266, 0.039330858170511816], [0.0, 0.8768343646327749, 0.43985606507380165, 0.15436261824021316, 0.0], [0.0705798087942329, 0.0, 0.0, 1.7920452865785115, 0.22087853390038387], [0.1581231408180829, 0.0, 0.0, 0.0, 0.2193834059393425], [0.0, 0.040296842411737414, 0.0, 0.0, 0.5686298236827162], [0.014650757684293117, 0.01615454978325682, 0.05521680041788276, 0.0, 0.291853667974936], [0.026533883503004257, 0.07187735763159014, 0.08765360991637748, 0.13934754343972042, 0.0], [0.0, 0.0, 0.0, 0.005140265453277411, 0.6137757204520045], [0.0, 0.10596331999825238, 0.0, 0.93444316505366, 0.0], [0.7415595909766768, 0.0, 0.0, 0.0, 0.0], [0.9131043064194115, 0.0, 0.06491945186006168, 0.0, 0.0], [0.986980867257927, 0.0, 0.0, 0.01915080840165196, 0.0], [0.0, 0.0, 1.6572632767450266, 0.06649914318594209, 0.0], [0.5546319944289798, 0.0, 0.0, 0.0, 0.0], [0.10688411466546927, 0.0, 0.09172042682401088, 0.11813951757192936, 0.36677380263169335], [0.0014067666626110444, 1.0858273549982973, 0.05001430788962403, 0.020205981122835927, 0.0], [0.0, 0.0, 0.0, 0.34009880237089885, 0.618376259256549], [1.1771378826551204, 0.018371531705770706, 0.0, 0.0, 0.0], [0.0, 0.0, 0.021663496279402377, 1.0106934173192736, 0.26997266978657225], [0.848077937344591, 0.0, 0.0, 0.14972087395912279, 0.0], [0.0, 0.0, 0.0, 0.0, 0.44091798834506846], [0.0, 0.8332031290330533, 0.0, 0.0, 0.340103779486513], [0.0, 0.41313234387451303, 0.07011225823108262, 0.0, 0.06882182160538683], [0.0, 0.0, 0.299718369544443, 0.0, 0.10992568360099159], [0.13602346265534138, 0.0, 0.0, 0.25902641403444887, 0.2815443829873923], [0.015984018137124086, 0.0, 0.05253029142634804, 0.03376810133051689, 0.040590144148513245], [0.011827806399140668, 0.0, 0.15286111363560814, 0.0, 0.7607387268202376], [0.0013253615924365028, 0.5771993840589174, 0.0, 0.3088310473980016, 0.0], [0.18095711070831796, 0.9592165699398806, 0.0, 0.0, 0.037655907035095665], [0.012522199111191321, 0.0, 0.08629167154560093, 0.0, 0.09486979943205426], [0.0, 0.0, 0.18691853638648387, 0.015262144873039916, 0.17741930142780973], [0.1123390384680068, 0.20576201784145864, 0.0, 0.2224187319920069, 0.04147984006450041], [0.0, 0.4036387378232481, 0.6887375727598727, 0.0, 0.0], [0.36968943550232247, 0.0, 0.0544393470033461, 0.0, 0.1204377337159069], [0.0, 0.9846298141536044, 0.0, 0.0, 0.4226113378580124], [0.0, 0.03573960765926421, 0.1639377349354181, 0.10661522790170565, 0.10869937654641512], [0.0, 0.0, 0.04345475379477467, 0.036482464599207086, 1.1203242812489465], [0.0, 0.43644490940616965, 0.0, 0.0, 0.9458785092574719], [0.3639750692126105, 0.012069946803280386, 0.08415493178906525, 0.24667777608274685, 0.005799479983291423], [0.12615169609063123, 0.0, 0.06485576840729114, 0.1684279912636433, 0.03968811062423971], [0.05157064269392274, 0.010851303139193273, 0.17232904295735574, 0.20051083321784519, 0.23740585113069318], [0.039428553666516125, 0.03977493154207678, 0.0, 0.10838886103836254, 1.056259052007822], [0.0, 0.0, 0.7575937679235999, 0.0, 0.1522218710174383], [0.0, 0.05975263955593759, 1.4382905520417504, 0.0, 0.0], [0.04944400556796911, 0.0, 0.0, 0.060143826032944575, 0.1680762049176326], [0.01097890783736147, 0.0, 0.523637564930705, 0.004016144833506069, 0.017346335824955116], [0.0, 0.0, 0.9786798896340708, 1.6794637522176925, 0.0], [0.0, 1.0701727930957405, 0.12074592348790454, 0.0, 0.0], [0.14889138760633103, 0.0, 0.6018358281349111, 0.009257543468101783, 0.06343672445891531], [0.0, 0.0, 0.7591091557599509, 0.0, 0.0], [0.09961961585918573, 0.0, 0.0, 0.22262115106685723, 0.1691409366440476], [0.0, 0.06878476830577734, 0.016133433358482097, 0.0, 0.1918636137870639], [0.10147464312274672, 0.0, 0.0, 0.24484074696875865, 0.7192282364234192], [0.017611538869308035, 0.0, 0.0, 1.532325430379073, 0.0], [0.3693639945469049, 0.0, 0.0, 0.0, 0.9786217434697979], [0.0, 0.0, 0.0, 1.5897208016979503, 0.0], [0.0, 0.8455603276151018, 0.0, 0.0, 0.7644729553010435], [0.06723217808496981, 0.0, 0.009775653598446761, 0.12556043199213368, 0.22344066162872167], [0.005236776848272575, 0.0, 1.429493872109946, 0.0, 0.0], [0.0, 2.1133835862934727, 0.0, 0.0, 0.0]]

    tab_profil_final = []
    tab_profil_final.push(p[indice_profil*5],p[indice_profil*5+1],p[indice_profil*5+2],p[indice_profil*5+3],p[indice_profil*5+4])
    new_profil_narray = NArray.to_na(tab_profil_final)

    new_profil_vector=NMatrix[new_profil_narray]
    #new_profil de type [1,10]
    resultat = new_profil_vector * q.transpose


    return resultat.to_a[0]
  end

  def somme_tab(tab)
    somme = 0
    tab.each do |val|
      somme = somme + val
    end
    return somme
  end

  def prevision_product(tab)

    nbE = 5

    tab1 = tab.max(nbE)
    tab2=[]
    tab_exp =[]
    somme = 0

    tab1.each do |val|
      tab2.push(tab.find_index(val))
      val_exp = 2**(2*val)
      tab_exp.push(val_exp)
      somme=somme+val_exp
    end

    p tab2

    tab_exp.each_with_index do |value,index|
      tab_exp[index]=tab_exp[index]/somme*100
    end

    # Début prévision
    proba = NArray.to_na(tab_exp).cumsum
    predictions = []
    valeur_possible = tab2

    p "Avant boucle 1"
    p tab_exp
    p predictions
    p valeur_possible

    u = rand(100)

    for i in 0..(nbE-1)
      if u < proba[i]
        tab_exp.delete_at(i)
        value_f = valeur_possible[i]
        valeur_possible.delete_at(i)
        predictions.push(value_f)
        break
      end
    end

    p "Sortie boucle 1"
    p tab_exp
    p predictions
    p valeur_possible


    somme_tmp = somme_tab(tab_exp)

    tab_exp.each_with_index do |value,index|
      tab_exp[index]=tab_exp[index]/somme_tmp*100
    end

    proba1 = NArray.to_na(tab_exp).cumsum

    r = rand(100)

    p "Avant boucle 2"
    p tab_exp
    p predictions
    p valeur_possible

    for i in 0..(nbE-2)
      if r < proba1[i]
        tab_exp.delete_at(i)
        value_f = valeur_possible[i]
        valeur_possible.delete_at(i)
        predictions.push(value_f)
        break
      end
    end

    p "Sortie boucle 2"
    p tab_exp
    p predictions
    p valeur_possible

    somme_tmp = somme_tab(tab_exp)

    tab_exp.each_with_index do |value,index|
      tab_exp[index]=tab_exp[index]/somme_tmp*100
    end


    p "Avant boucle 3"
    p tab_exp
    p predictions
    p valeur_possible

    proba2 = NArray.to_na(tab_exp).cumsum

    r = rand(100)

    for i in 0..(nbE-3)
      if r < proba2[i]
        predictions.push(valeur_possible[i])
        break
      end
    end

    p "Sortie boucle 3"
    p tab_exp
    p predictions
    p valeur_possible


    return predictions
  end


end
